import { MatchData, TeamForm, H2HStats, PredictionFactors, Prediction, PredictionModel, ValidationResult, MatchStatistics, TeamStats } from './types';
import { redisCache } from '../cache/RedisCache';
import { v4 as uuidv4 } from 'uuid';

export class HistoricalAnalyzer {
  private readonly RECENT_MATCHES_COUNT = 5;
  private readonly DEFAULT_WEIGHTS = {
    recent_form: 0.35,        // Reduzido para dar espaço às estatísticas
    h2h_history: 0.25,        // Reduzido para dar espaço às estatísticas
    home_advantage: 0.15,     // Reduzido para dar espaço às estatísticas
    goals_average: 0.05,      // Reduzido para dar espaço às estatísticas
    team_statistics: 0.20     // Novo fator: estatísticas das partidas
  };

  /**
   * Calcula a forma recente de um time
   */
  calculateTeamForm(teamId: number, teamName: string, allMatches: MatchData[], beforeDate: string): TeamForm {
    // Filtrar jogos do time antes da data especificada
    const teamMatches = allMatches
      .filter(match => 
        (match.home_team_id === teamId || match.away_team_id === teamId) &&
        new Date(match.date) < new Date(beforeDate) &&
        match.status_short === 'FT' && // Apenas jogos finalizados
        match.goals_home !== null && match.goals_away !== null
      )
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()) // Mais recentes primeiro
      .slice(0, this.RECENT_MATCHES_COUNT);

    let wins = 0;
    let draws = 0;
    let losses = 0;
    let goals_for = 0;
    let goals_against = 0;

    teamMatches.forEach(match => {
      const isHome = match.home_team_id === teamId;
      const teamGoals = isHome ? match.goals_home! : match.goals_away!;
      const opponentGoals = isHome ? match.goals_away! : match.goals_home!;

      goals_for += teamGoals;
      goals_against += opponentGoals;

      if (teamGoals > opponentGoals) {
        wins++;
      } else if (teamGoals === opponentGoals) {
        draws++;
      } else {
        losses++;
      }
    });

    // Calcular pontuação da forma (vitória = 3pts, empate = 1pt)
    const totalPoints = (wins * 3) + (draws * 1);
    const maxPossiblePoints = teamMatches.length * 3;
    const form_score = maxPossiblePoints > 0 ? totalPoints / maxPossiblePoints : 0;

    return {
      team_id: teamId,
      team_name: teamName,
      recent_matches: teamMatches.length,
      wins,
      draws,
      losses,
      goals_for,
      goals_against,
      form_score
    };
  }

  /**
   * Calcula estatísticas head-to-head entre dois times
   */
  calculateH2HStats(homeTeamId: number, awayTeamId: number, allMatches: MatchData[], beforeDate: string): H2HStats {
    // Filtrar confrontos diretos antes da data especificada
    const h2hMatches = allMatches
      .filter(match => 
        ((match.home_team_id === homeTeamId && match.away_team_id === awayTeamId) ||
         (match.home_team_id === awayTeamId && match.away_team_id === homeTeamId)) &&
        new Date(match.date) < new Date(beforeDate) &&
        match.status_short === 'FT' &&
        match.goals_home !== null && match.goals_away !== null
      );

    if (h2hMatches.length === 0) {
      return {
        home_team_id: homeTeamId,
        away_team_id: awayTeamId,
        total_matches: 0,
        home_wins: 0,
        draws: 0,
        away_wins: 0,
        home_goals_avg: 0,
        away_goals_avg: 0,
        home_advantage: 0.5 // Neutro quando não há histórico
      };
    }

    let homeWins = 0;
    let draws = 0;
    let awayWins = 0;
    let totalHomeGoals = 0;
    let totalAwayGoals = 0;

    h2hMatches.forEach(match => {
      const isCurrentHomeTeamAtHome = match.home_team_id === homeTeamId;
      
      if (isCurrentHomeTeamAtHome) {
        totalHomeGoals += match.goals_home!;
        totalAwayGoals += match.goals_away!;
        
        if (match.goals_home! > match.goals_away!) {
          homeWins++;
        } else if (match.goals_home! === match.goals_away!) {
          draws++;
        } else {
          awayWins++;
        }
      } else {
        totalHomeGoals += match.goals_away!;
        totalAwayGoals += match.goals_home!;
        
        if (match.goals_away! > match.goals_home!) {
          homeWins++;
        } else if (match.goals_away! === match.goals_home!) {
          draws++;
        } else {
          awayWins++;
        }
      }
    });

    const home_goals_avg = totalHomeGoals / h2hMatches.length;
    const away_goals_avg = totalAwayGoals / h2hMatches.length;
    
    // Calcular vantagem baseada no histórico (0 = sempre perde, 1 = sempre ganha, 0.5 = equilibrado)
    const home_advantage = (homeWins + (draws * 0.5)) / h2hMatches.length;

    return {
      home_team_id: homeTeamId,
      away_team_id: awayTeamId,
      total_matches: h2hMatches.length,
      home_wins: homeWins,
      draws,
      away_wins: awayWins,
      home_goals_avg,
      away_goals_avg,
      home_advantage
    };
  }

  /**
   * Calcula a vantagem de jogar em casa para uma liga
   */
  calculateHomeAdvantage(leagueId: number, allMatches: MatchData[], beforeDate: string): number {
    const homeMatches = allMatches
      .filter(match => 
        match.league_id === leagueId &&
        new Date(match.date) < new Date(beforeDate) &&
        match.status_short === 'FT' &&
        match.goals_home !== null && match.goals_away !== null
      );

    if (homeMatches.length === 0) return 0.55; // Valor padrão baseado em estatísticas do futebol

    let homeWins = 0;
    let draws = 0;

    homeMatches.forEach(match => {
      if (match.goals_home! > match.goals_away!) {
        homeWins++;
      } else if (match.goals_home! === match.goals_away!) {
        draws++;
      }
    });

    // Calcular porcentagem de vitórias em casa + metade dos empates
    return (homeWins + (draws * 0.5)) / homeMatches.length;
  }

  /**
   * Gera uma predição para uma partida
   */
  predict(
    match: MatchData, 
    allMatches: MatchData[], 
    weights = this.DEFAULT_WEIGHTS
  ): Prediction {
    // Calcular fatores
    const homeForm = this.calculateTeamForm(
      match.home_team_id, 
      match.home_team_name, 
      allMatches, 
      match.date
    );
    
    const awayForm = this.calculateTeamForm(
      match.away_team_id, 
      match.away_team_name, 
      allMatches, 
      match.date
    );
    
    const h2hStats = this.calculateH2HStats(
      match.home_team_id, 
      match.away_team_id, 
      allMatches, 
      match.date
    );
    
    const leagueHomeAdvantage = this.calculateHomeAdvantage(
      match.league_id, 
      allMatches, 
      match.date
    );

    // Calcular expectativa de gols baseada na forma recente
    const homeGoalsExpectancy = homeForm.recent_matches > 0 ? 
      homeForm.goals_for / homeForm.recent_matches : 1;
    const awayGoalsExpectancy = awayForm.recent_matches > 0 ? 
      awayForm.goals_for / awayForm.recent_matches : 1;

    const factors: PredictionFactors = {
      home_form: homeForm.form_score,
      away_form: awayForm.form_score,
      h2h_advantage: h2hStats.home_advantage,
      home_advantage: leagueHomeAdvantage,
      goals_expectancy: (homeGoalsExpectancy + awayGoalsExpectancy) / 2,
      team_statistics_advantage: 0.5 // Valor padrão (equilibrado) para compatibilidade
    };

    // Calcular probabilidades usando os pesos
    let homeWinProb = 
      (factors.home_form * weights.recent_form) +
      (factors.h2h_advantage * weights.h2h_history) +
      (factors.home_advantage * weights.home_advantage) +
      (Math.min(factors.goals_expectancy / 3, 1) * weights.goals_average);

    let awayWinProb = 
      (factors.away_form * weights.recent_form) +
      ((1 - factors.h2h_advantage) * weights.h2h_history) +
      ((1 - factors.home_advantage) * weights.home_advantage) +
      (Math.min(factors.goals_expectancy / 3, 1) * weights.goals_average);

    // Calcular probabilidade de empate (inversamente proporcional à diferença entre os times)
    const formDifference = Math.abs(factors.home_form - factors.away_form);
    let drawProb = Math.max(0.1, 0.4 - (formDifference * 0.5)); // Entre 10% e 40%

    // Normalizar probabilidades para somar 1
    const total = homeWinProb + drawProb + awayWinProb;
    homeWinProb /= total;
    drawProb /= total;
    awayWinProb /= total;

    // Calcular confiança baseada na quantidade de dados históricos disponíveis
    const confidence = Math.min(
      (homeForm.recent_matches + awayForm.recent_matches + h2hStats.total_matches) / 15,
      1
    );

    // Determinar resultado previsto
    let predicted_result: 'HOME' | 'DRAW' | 'AWAY';
    if (homeWinProb > drawProb && homeWinProb > awayWinProb) {
      predicted_result = 'HOME';
    } else if (awayWinProb > drawProb && awayWinProb > homeWinProb) {
      predicted_result = 'AWAY';
    } else {
      predicted_result = 'DRAW';
    }

    // Determinar resultado real se disponível
    let actual_result: 'HOME' | 'DRAW' | 'AWAY' | null = null;
    let is_correct: boolean | undefined = undefined;

    if (match.goals_home !== null && match.goals_away !== null && match.status_short === 'FT') {
      if (match.goals_home > match.goals_away) {
        actual_result = 'HOME';
      } else if (match.goals_away > match.goals_home) {
        actual_result = 'AWAY';
      } else {
        actual_result = 'DRAW';
      }
      is_correct = predicted_result === actual_result;
    }

    return {
      id: uuidv4(),
      fixture_id: match.fixture_id,
      probabilities: {
        home_win: Math.round(homeWinProb * 100) / 100,
        draw: Math.round(drawProb * 100) / 100,
        away_win: Math.round(awayWinProb * 100) / 100
      },
      confidence: Math.round(confidence * 100) / 100,
      factors,
      predicted_result,
      actual_result,
      is_correct,
      created_at: new Date(),
      updated_at: new Date()
    };
  }

  /**
   * Gera uma predição para uma partida com estatísticas avançadas
   */
  async predictWithStatistics(
    match: MatchData, 
    allMatches: MatchData[], 
    weights = this.DEFAULT_WEIGHTS
  ): Promise<Prediction> {
    // Calcular fatores tradicionais
    const homeForm = this.calculateTeamForm(
      match.home_team_id, 
      match.home_team_name, 
      allMatches, 
      match.date
    );
    
    const awayForm = this.calculateTeamForm(
      match.away_team_id, 
      match.away_team_name, 
      allMatches, 
      match.date
    );

    const h2hStats = this.calculateH2HStats(
      match.home_team_id,
      match.away_team_id,
      allMatches,
      match.date
    );

    const leagueHomeAdvantage = this.calculateHomeAdvantage(
      match.league_id,
      allMatches,
      match.date
    );

    // Tentar calcular estatísticas dos times (pode falhar se dados não estiverem disponíveis)
    let teamStatsAdvantage = 0.5; // Valor padrão (equilibrado)
    
    try {
      const homeTeamStats = await this.calculateTeamStatistics(
        match.home_team_id,
        match.home_team_name,
        allMatches,
        match.date
      );

      const awayTeamStats = await this.calculateTeamStatistics(
        match.away_team_id,
        match.away_team_name,
        allMatches,
        match.date
      );

      teamStatsAdvantage = this.calculateTeamStatsAdvantage(homeTeamStats, awayTeamStats);
    } catch (error) {
      console.warn(`Erro ao calcular estatísticas para a partida ${match.fixture_id}:`, error);
      // Manter valor padrão
    }

    // Expectativa de gols
    const homeGoalsExpectancy = homeForm.recent_matches > 0 ? 
      homeForm.goals_for / homeForm.recent_matches : 1;
    const awayGoalsExpectancy = awayForm.recent_matches > 0 ? 
      awayForm.goals_for / awayForm.recent_matches : 1;

    const factors: PredictionFactors = {
      home_form: homeForm.form_score,
      away_form: awayForm.form_score,
      h2h_advantage: h2hStats.home_advantage,
      home_advantage: leagueHomeAdvantage,
      goals_expectancy: (homeGoalsExpectancy + awayGoalsExpectancy) / 2,
      team_statistics_advantage: teamStatsAdvantage
    };

    // Calcular probabilidades usando os pesos (incluindo estatísticas)
    let homeWinProb = 
      (factors.home_form * weights.recent_form) +
      (factors.h2h_advantage * weights.h2h_history) +
      (factors.home_advantage * weights.home_advantage) +
      (Math.min(factors.goals_expectancy / 3, 1) * weights.goals_average) +
      (factors.team_statistics_advantage * weights.team_statistics);

    let awayWinProb = 
      (factors.away_form * weights.recent_form) +
      ((1 - factors.h2h_advantage) * weights.h2h_history) +
      ((1 - factors.home_advantage) * weights.home_advantage) +
      (Math.min(factors.goals_expectancy / 3, 1) * weights.goals_average) +
      ((1 - factors.team_statistics_advantage) * weights.team_statistics);

    // Calcular probabilidade de empate
    const formDifference = Math.abs(factors.home_form - factors.away_form);
    const statsDifference = Math.abs(factors.team_statistics_advantage - 0.5) * 2; // Normalizar para 0-1
    const combinedDifference = (formDifference + statsDifference) / 2;
    
    let drawProb = Math.max(0.1, 0.4 - (combinedDifference * 0.5));

    // Normalizar probabilidades para somar 1
    const total = homeWinProb + drawProb + awayWinProb;
    homeWinProb /= total;
    drawProb /= total;
    awayWinProb /= total;

    // Calcular confiança baseada na quantidade de dados históricos
    const confidence = Math.min(
      (homeForm.recent_matches + awayForm.recent_matches + h2hStats.total_matches) / 15,
      1
    );

    // Determinar resultado previsto
    let predicted_result: 'HOME' | 'DRAW' | 'AWAY';
    if (homeWinProb > drawProb && homeWinProb > awayWinProb) {
      predicted_result = 'HOME';
    } else if (awayWinProb > drawProb && awayWinProb > homeWinProb) {
      predicted_result = 'AWAY';
    } else {
      predicted_result = 'DRAW';
    }

    // Determinar resultado real se disponível
    let actual_result: 'HOME' | 'DRAW' | 'AWAY' | null = null;
    let is_correct: boolean | undefined = undefined;

    if (match.goals_home !== null && match.goals_away !== null && match.status_short === 'FT') {
      if (match.goals_home > match.goals_away) {
        actual_result = 'HOME';
      } else if (match.goals_away > match.goals_home) {
        actual_result = 'AWAY';
      } else {
        actual_result = 'DRAW';
      }

      is_correct = predicted_result === actual_result;
    }

    return {
      id: uuidv4(),
      fixture_id: match.fixture_id,
      probabilities: {
        home_win: Math.round(homeWinProb * 100) / 100,
        draw: Math.round(drawProb * 100) / 100,
        away_win: Math.round(awayWinProb * 100) / 100,
      },
      confidence: Math.round(confidence * 100) / 100,
      factors,
      predicted_result,
      actual_result,
      is_correct,
      created_at: new Date(),
      updated_at: new Date(),
    };
  }

  /**
   * Calcula vantagem baseada em estatísticas entre dois times
   */
  calculateTeamStatsAdvantage(homeStats: TeamStats, awayStats: TeamStats): number {
    // Comparar ratings ofensivos e defensivos
    const homeOffensiveVsAwayDefensive = homeStats.offensive_rating * (1 - awayStats.defensive_rating);
    const awayOffensiveVsHomeDefensive = awayStats.offensive_rating * (1 - homeStats.defensive_rating);
    
    // Calcular vantagem (0 = vantagem total do visitante, 1 = vantagem total da casa, 0.5 = equilibrado)
    const totalOffensive = homeOffensiveVsAwayDefensive + awayOffensiveVsHomeDefensive;
    
    if (totalOffensive === 0) return 0.5; // Equilibrado
    
    return homeOffensiveVsAwayDefensive / totalOffensive;
  }

  /**
   * Analisa uma temporada completa de forma cronológica
   */
  async analyzeSeasonChronologically(
    leagueId: number, 
    seasonYear: number, 
    matches: MatchData[],
    onProgress?: (prediction: Prediction, progress: number) => void
  ): Promise<Prediction[]> {
    // Ordenar partidas cronologicamente
    const sortedMatches = matches
      .filter(match => match.league_id === leagueId && match.season_year === seasonYear)
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

    const predictions: Prediction[] = [];
    
    for (let i = 0; i < sortedMatches.length; i++) {
      const currentMatch = sortedMatches[i];
      
      // Para cada partida, usar apenas o histórico anterior
      const historicalMatches = matches.filter(match => 
        new Date(match.date) < new Date(currentMatch.date)
      );
      
      // Gerar predição usando apenas dados históricos disponíveis até aquele momento
      const prediction = this.predict(currentMatch, historicalMatches);
      predictions.push(prediction);
      
      // Salvar predição no cache
      await redisCache.storePrediction(prediction);
      
      // Callback de progresso
      if (onProgress) {
        const progress = ((i + 1) / sortedMatches.length) * 100;
        onProgress(prediction, progress);
      }
    }

    return predictions;
  }

  /**
   * Valida a precisão do modelo
   */
  validateModel(predictions: Prediction[]): ValidationResult {
    const finishedPredictions = predictions.filter(p => p.actual_result !== null);
    
    if (finishedPredictions.length === 0) {
      return {
        total_matches: 0,
        correct_predictions: 0,
        accuracy: 0,
        precision_by_outcome: { home_win: 0, draw: 0, away_win: 0 },
        confidence_correlation: 0
      };
    }

    const correctPredictions = finishedPredictions.filter(p => p.is_correct === true).length;
    const accuracy = correctPredictions / finishedPredictions.length;

    // Calcular precisão por tipo de resultado
    const homeWinPredictions = finishedPredictions.filter(p => p.predicted_result === 'HOME');
    const drawPredictions = finishedPredictions.filter(p => p.predicted_result === 'DRAW');
    const awayWinPredictions = finishedPredictions.filter(p => p.predicted_result === 'AWAY');

    const precision_by_outcome = {
      home_win: homeWinPredictions.length > 0 ? 
        homeWinPredictions.filter(p => p.is_correct).length / homeWinPredictions.length : 0,
      draw: drawPredictions.length > 0 ? 
        drawPredictions.filter(p => p.is_correct).length / drawPredictions.length : 0,
      away_win: awayWinPredictions.length > 0 ? 
        awayWinPredictions.filter(p => p.is_correct).length / awayWinPredictions.length : 0
    };

    // Calcular correlação entre confiança e precisão (simplificado)
    const avgConfidence = finishedPredictions.reduce((sum, p) => sum + p.confidence, 0) / finishedPredictions.length;
    const confidence_correlation = avgConfidence * accuracy; // Correlação simplificada

    return {
      total_matches: finishedPredictions.length,
      correct_predictions: correctPredictions,
      accuracy: Math.round(accuracy * 1000) / 1000,
      precision_by_outcome: {
        home_win: Math.round(precision_by_outcome.home_win * 1000) / 1000,
        draw: Math.round(precision_by_outcome.draw * 1000) / 1000,
        away_win: Math.round(precision_by_outcome.away_win * 1000) / 1000
      },
      confidence_correlation: Math.round(confidence_correlation * 1000) / 1000
    };
  }

  /**
   * Cria um modelo de predição baseado nos resultados da análise
   */
  createModel(
    leagueId: number, 
    seasonYear: number, 
    predictions: Prediction[], 
    allMatches: MatchData[]
  ): PredictionModel {
    const validation = this.validateModel(predictions);
    
    // Calcular padrões da liga
    const finishedMatches = allMatches.filter(m => 
      m.league_id === leagueId && 
      m.season_year === seasonYear &&
      m.status_short === 'FT' &&
      m.goals_home !== null && 
      m.goals_away !== null
    );

    let homeWins = 0;
    let draws = 0;
    let awayWins = 0;
    let totalGoals = 0;

    finishedMatches.forEach(match => {
      totalGoals += (match.goals_home! + match.goals_away!);
      
      if (match.goals_home! > match.goals_away!) {
        homeWins++;
      } else if (match.goals_home! === match.goals_away!) {
        draws++;
      } else {
        awayWins++;
      }
    });

    const totalMatches = finishedMatches.length;
    const patterns = {
      home_win_rate: totalMatches > 0 ? homeWins / totalMatches : 0.5,
      draw_rate: totalMatches > 0 ? draws / totalMatches : 0.25,
      away_win_rate: totalMatches > 0 ? awayWins / totalMatches : 0.25,
      avg_goals_per_match: totalMatches > 0 ? totalGoals / totalMatches : 2.5
    };

    return {
      id: uuidv4(),
      league_id: leagueId,
      season_year: seasonYear,
      weights: this.DEFAULT_WEIGHTS,
      patterns,
      performance: {
        accuracy: validation.accuracy,
        precision: validation.accuracy, // Simplificado
        total_predictions: validation.total_matches,
        correct_predictions: validation.correct_predictions
      },
      created_at: new Date(),
      last_updated: new Date()
    };
  }

  /**
   * Busca estatísticas de uma partida específica
   */
  async getMatchStatistics(fixtureId: number): Promise<MatchStatistics[]> {
    try {
      const response = await fetch(`/api/fixtures/${fixtureId}/statistics`);
      if (!response.ok) {
        console.warn(`Não foi possível buscar estatísticas para a partida ${fixtureId}`);
        return [];
      }
      
      const data = await response.json();
      return Array.isArray(data.data) ? data.data : [];
    } catch (error) {
      console.warn(`Erro ao buscar estatísticas da partida ${fixtureId}:`, error);
      return [];
    }
  }

  /**
   * Calcula estatísticas médias de um time baseadas em jogos recentes
   */
  async calculateTeamStatistics(
    teamId: number, 
    teamName: string, 
    allMatches: MatchData[], 
    beforeDate: string
  ): Promise<TeamStats> {
    // Filtrar jogos recentes do time
    const teamMatches = allMatches
      .filter(match => 
        (match.home_team_id === teamId || match.away_team_id === teamId) &&
        new Date(match.date) < new Date(beforeDate) &&
        match.status_short === 'FT' &&
        match.goals_home !== null && match.goals_away !== null
      )
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, this.RECENT_MATCHES_COUNT);

    const statsArrays: MatchStatistics[][] = [];
    
    // Buscar estatísticas para cada partida
    for (const match of teamMatches) {
      const matchStats = await this.getMatchStatistics(match.fixture_id);
      statsArrays.push(matchStats.filter(stat => stat.team_id === teamId));
    }

    // Calcular médias das estatísticas
    const statTypes = [
      'Ball Possession', 'Total Shots', 'Shots on Goal', 'Corner Kicks', 
      'expected_goals', 'Goalkeeper Saves', 'Blocked Shots', 'Fouls',
      'Yellow Cards', 'Red Cards', 'Passes %', 'Offsides'
    ];

    const averages: Record<string, number> = {};
    
    statTypes.forEach(type => {
      const values: number[] = [];
      statsArrays.forEach(matchStats => {
        const stat = matchStats.find(s => s.type === type);
        if (stat && stat.value !== null && stat.value !== '') {
          const numValue = parseFloat(stat.value);
          if (!isNaN(numValue)) {
            values.push(numValue);
          }
        }
      });
      
      averages[type] = values.length > 0 ? values.reduce((a, b) => a + b, 0) / values.length : 0;
    });

    // Calcular ratings
    const avgShotsOnTarget = averages['Shots on Goal'] || 0;
    const avgTotalShots = averages['Total Shots'] || 1;
    const shotsAccuracy = avgShotsOnTarget / avgTotalShots;
    
    const avgCards = (averages['Yellow Cards'] || 0) + (averages['Red Cards'] || 0);
    
    // Rating ofensivo (0 a 1)
    const offensiveRating = Math.min(1, (
      (averages['Ball Possession'] / 100) * 0.2 +
      (avgTotalShots / 20) * 0.3 +
      shotsAccuracy * 0.3 +
      (averages['Corner Kicks'] / 10) * 0.1 +
      (averages['expected_goals'] / 3) * 0.1
    ));

    // Rating defensivo (0 a 1) - quanto maior, melhor defesa
    const defensiveRating = Math.min(1, (
      (1 - avgCards / 10) * 0.3 +
      (averages['Goalkeeper Saves'] / 10) * 0.3 +
      (averages['Blocked Shots'] / 10) * 0.2 +
      (1 - averages['Fouls'] / 25) * 0.2
    ));

    const overallRating = (offensiveRating + defensiveRating) / 2;

    return {
      team_id: teamId,
      team_name: teamName,
      avg_ball_possession: averages['Ball Possession'] || 0,
      avg_total_shots: averages['Total Shots'] || 0,
      avg_shots_on_goal: averages['Shots on Goal'] || 0,
      avg_shots_accuracy: shotsAccuracy,
      avg_corner_kicks: averages['Corner Kicks'] || 0,
      avg_expected_goals: averages['expected_goals'] || 0,
      avg_goalkeeper_saves: averages['Goalkeeper Saves'] || 0,
      avg_blocked_shots: averages['Blocked Shots'] || 0,
      avg_fouls_committed: averages['Fouls'] || 0,
      avg_cards_received: avgCards,
      avg_passes_accuracy: averages['Passes %'] || 0,
      avg_offsides: averages['Offsides'] || 0,
      offensive_rating: offensiveRating,
      defensive_rating: defensiveRating,
      overall_rating: overallRating
    };
  }
}
