import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Avatar,
  Chip,
  Grid,
  Divider,
  IconButton,
  Collapse,
  Stack,
  Paper,
  Badge,
  Tooltip,
  Button
} from '@mui/material';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
import SportsSoccerIcon from '@mui/icons-material/SportsSoccer';
import SportsIcon from '@mui/icons-material/Sports';
import CardGiftcardIcon from '@mui/icons-material/CardGiftcard';
import SubdirectoryArrowRightIcon from '@mui/icons-material/SubdirectoryArrowRight';
import HistoryIcon from '@mui/icons-material/History';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import H2HDisplay from './H2HDisplay';
import OddsDisplay from './OddsDisplay';

interface LiveMatchCardProps {
  match: {
    fixture: {
      id: number;
      date: string;
      status: {
        long: string;
        short: string;
        elapsed: number | null;
      };
    };
    league: {
      id: number;
      name: string;
      country: string;
      logo: string;
      round: string;
    };
    teams: {
      home: {
        id: number;
        name: string;
        logo: string;
      };
      away: {
        id: number;
        name: string;
        logo: string;
      };
    };
    goals: {
      home: number | null;
      away: number | null;
    };
    score: {
      halftime: {
        home: number | null;
        away: number | null;
      };
    };
  };
  events?: Array<{
    time: {
      elapsed: number;
      extra: number | null;
    };
    team: {
      id: number;
      name: string;
      logo: string;
    };
    player: {
      id: number;
      name: string;
    };
    assist: {
      id: number | null;
      name: string | null;
    };
    type: string;
    detail: string;
  }>;
  onFetchEvents: (fixtureId: number) => void;
  h2hData?: any[];
  h2hLoading?: boolean;
  h2hError?: string;
  onFetchH2H: (fixtureId: number, match: any) => void;
  oddsData?: any[];
  oddsLoading?: boolean;
  oddsError?: string;
  onFetchOdds: (fixtureId: number) => void;
}
const LiveMatchCard: React.FC<LiveMatchCardProps> = ({ 
  match, 
  events, 
  onFetchEvents, 
  h2hData, 
  h2hLoading = false, 
  h2hError, 
  onFetchH2H,
  oddsData,
  oddsLoading = false,
  oddsError,
  onFetchOdds
}) => {
  const [expanded, setExpanded] = useState(false);
  const [h2hExpanded, setH2hExpanded] = useState(false);
  const [oddsExpanded, setOddsExpanded] = useState(false);

  const handleH2HClick = () => {
    if (!h2hExpanded && !h2hData) {
      onFetchH2H(match.fixture.id, match);
    }
    setH2hExpanded(!h2hExpanded);
  };

  const handleOddsClick = () => {
    if (!oddsExpanded && !oddsData) {
      onFetchOdds(match.fixture.id);
    }
    setOddsExpanded(!oddsExpanded);
  };

  const handleEventsClick = () => {
    if (!expanded) {
      onFetchEvents(match.fixture.id);
    }
    setExpanded(!expanded);
  };

  const handleH2HClick = () => {
    if (!h2hExpanded && !h2hData) {
      onFetchH2H(match.fixture.id, match);
    }
    setH2hExpanded(!h2hExpanded);
  };

  // Função para determinar a cor do chip de status
  const getStatusColor = (status: string) => {
    switch (status) {
      case '1H':
        return 'success';
      case 'HT':
        return 'warning';
      case '2H':
        return 'success';
      case 'ET':
        return 'error';
      case 'BT':
        return 'warning';
      case 'P':
        return 'error';
      case 'SUSP':
        return 'error';
      case 'INT':
        return 'error';
      case 'FT':
        return 'default';
      default:
        return 'default';
    }
  };
  
  // Função para obter a descrição completa do status
  const getStatusDescription = (status: string) => {
    switch (status) {
      case '1H':
        return 'Primeiro Tempo';
      case 'HT':
        return 'Intervalo';
      case '2H':
        return 'Segundo Tempo';
      case 'ET':
        return 'Prorrogação';
      case 'BT':
        return 'Intervalo da Prorrogação';
      case 'P':
        return 'Pênaltis';
      case 'SUSP':
        return 'Partida Suspensa';
      case 'INT':
        return 'Partida Interrompida';
      case 'FT':
        return 'Partida Finalizada';
      case 'AET':
        return 'Finalizada após Prorrogação';
      case 'PEN':
        return 'Finalizada após Pênaltis';
      case 'CANC':
        return 'Partida Cancelada';
      case 'ABD':
        return 'Partida Abandonada';
      case 'AWD':
        return 'Decisão Técnica';
      case 'WO':
        return 'WO';
      case 'LIVE':
        return 'Ao Vivo';
      default:
        return status;
    }
  };

  // Função para renderizar o ícone do evento com tooltip
  const renderEventIcon = (type: string, detail: string) => {
    let icon;
    let tooltipText = '';
    let color = 'default';
    
    if (type === 'Goal') {
      icon = <SportsSoccerIcon />;
      color = 'success';
      tooltipText = detail === 'Normal Goal' ? 'Gol' : 
                  detail === 'Own Goal' ? 'Gol Contra' : 
                  detail === 'Penalty' ? 'Pênalti' : 
                  detail === 'Missed Penalty' ? 'Pênalti Perdido' :
                  'Gol';
    } else if (type === 'Card') {
      if (detail === 'Yellow Card') {
        icon = <CardGiftcardIcon />;
        color = 'warning';
        tooltipText = 'Cartão Amarelo';
      } else if (detail === 'Red Card') {
        icon = <CardGiftcardIcon />;
        color = 'error';
        tooltipText = 'Cartão Vermelho';
      } else if (detail === 'Second Yellow card') {
        icon = <CardGiftcardIcon />;
        color = 'error';
        tooltipText = 'Segundo Cartão Amarelo';
      } else {
        icon = <CardGiftcardIcon />;
        color = 'error';
        tooltipText = 'Cartão';
      }
    } else if (type === 'subst') {
      icon = <SubdirectoryArrowRightIcon />;
      color = 'info';
      tooltipText = 'Substituição';
    } else if (type === 'Var') {
      icon = <SportsIcon />;
      color = 'secondary';
      tooltipText = `VAR - ${detail}`;
    } else {
      icon = <SportsIcon />;
      color = 'default';
      tooltipText = type;
    }
    
    return (
      <Tooltip title={tooltipText}>
        <Box sx={{ 
          cursor: 'help',
          color: `${color}.main`,
          display: 'flex',
          alignItems: 'center'
        }}>
          {icon}
        </Box>
      </Tooltip>
    );
  };

  // Função para formatar o texto do evento
  const formatEventText = (event: any) => {
    const playerName = event.player?.name || 'Jogador não informado';
    const assistName = event.assist?.name;
    
    if (event.type === 'Goal') {
      let goalText = `${playerName} marcou`;
      if (event.detail === 'Own Goal') {
        goalText = `${playerName} marcou gol contra`;
      } else if (event.detail === 'Penalty') {
        goalText = `${playerName} converteu pênalti`;
      } else if (event.detail === 'Missed Penalty') {
        goalText = `${playerName} perdeu pênalti`;
      }
      
      if (assistName && event.detail !== 'Own Goal' && event.detail !== 'Penalty') {
        goalText += ` (Assistência: ${assistName})`;
      }
      
      return goalText;
    } else if (event.type === 'Card') {
      if (event.detail === 'Yellow Card') {
        return `${playerName} recebeu cartão amarelo`;
      } else if (event.detail === 'Red Card') {
        return `${playerName} recebeu cartão vermelho`;
      } else if (event.detail === 'Second Yellow card') {
        return `${playerName} recebeu segundo amarelo`;
      }
      return `${playerName} recebeu cartão`;
    } else if (event.type === 'subst') {
      const outPlayer = playerName;
      const inPlayer = assistName || 'Jogador não informado';
      return `${outPlayer} saiu, ${inPlayer} entrou`;
    } else if (event.type === 'Var') {
      return `VAR: ${event.detail} - ${playerName}`;
    }
    
    return `${event.type}: ${playerName}`;
  };

  return (
    <Card 
      sx={{ 
        mb: 2, 
        position: 'relative',
        borderLeft: '5px solid',
        borderLeftColor: `${getStatusColor(match.fixture.status.short) === 'success' ? 'success.main' : 
                          getStatusColor(match.fixture.status.short) === 'warning' ? 'warning.main' : 
                          getStatusColor(match.fixture.status.short) === 'error' ? 'error.main' : 
                          'grey.400'}`
      }}
    >
      <CardContent sx={{ pb: 1 }}>
        {/* Cabeçalho com informações da liga */}
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
          <Avatar 
            src={match.league.logo} 
            alt={match.league.name} 
            sx={{ width: 24, height: 24, mr: 1 }}
          />
          <Typography variant="caption" color="text.secondary">
            {match.league.name} • {match.league.country} • {match.league.round}
          </Typography>
        </Box>

        {/* Conteúdo principal com times e placar */}
        <Box sx={{ display: 'grid', gridTemplateColumns: '5fr 2fr 5fr', gap: 1, alignItems: 'center' }}>
          {/* Time da casa */}
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
            <Typography variant="body1" fontWeight="medium" textAlign="right" mr={1}>
              {match.teams.home.name}
            </Typography>
            <Avatar 
              src={match.teams.home.logo} 
              alt={match.teams.home.name} 
              sx={{ width: 32, height: 32 }}
            />
          </Box>

          {/* Placar */}
          <Box 
            sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center',
              position: 'relative'
            }}
          >
            <Typography variant="h6" fontWeight="bold">
              {match.goals && typeof match.goals.home !== 'undefined' ? match.goals.home : 0} - 
              {match.goals && typeof match.goals.away !== 'undefined' ? match.goals.away : 0}
            </Typography>
            
            {match.score && match.score.halftime && 
             match.score.halftime.home !== null && 
             match.score.halftime.away !== null && (
              <Typography variant="caption" color="text.secondary">
                HT: {match.score.halftime.home} - {match.score.halftime.away}
              </Typography>
            )}
            
            <Tooltip title={match.fixture && match.fixture.status ? getStatusDescription(match.fixture.status.short) : 'Status desconhecido'}>
              <Chip 
                label={match.fixture && match.fixture.status && match.fixture.status.elapsed ? 
                  `${match.fixture.status.elapsed}'` : 
                  (match.fixture && match.fixture.status ? match.fixture.status.short : 'LIVE')} 
                size="small" 
                color={match.fixture && match.fixture.status ? getStatusColor(match.fixture.status.short) as any : 'default'}
                sx={{ 
                  position: 'absolute', 
                  top: -20, 
                  minWidth: 45,
                  height: 20,
                  '& .MuiChip-label': {
                    px: 1,
                    fontSize: '0.625rem',
                  },
                  cursor: 'help'
                }}
              />
        {/* Botões para expandir/recolher */}
        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1, mt: 1 }}>
          <Button
            variant="outlined"
            size="small"
            startIcon={<HistoryIcon />}
            onClick={handleH2HClick}
            sx={{ 
              fontSize: '0.75rem',
              textTransform: 'none',
              backgroundColor: h2hExpanded ? 'primary.main' : 'transparent',
              color: h2hExpanded ? 'white' : 'text.primary',
              '&:hover': {
                backgroundColor: h2hExpanded ? 'primary.dark' : 'action.hover',
              }
            }}
          >
            H2H
          </Button>
          <Button
            variant="outlined"
            size="small"
            startIcon={<AttachMoneyIcon />}
            onClick={handleOddsClick}
            sx={{ 
              fontSize: '0.75rem',
              textTransform: 'none',
              backgroundColor: oddsExpanded ? 'success.main' : 'transparent',
              color: oddsExpanded ? 'white' : 'text.primary',
              '&:hover': {
                backgroundColor: oddsExpanded ? 'success.dark' : 'action.hover',
              }
            }}
          >
            Odds
          </Button>
          <IconButton 
            onClick={handleExpandClick}
            size="small"
            sx={{ 
              transform: expanded ? 'rotate(180deg)' : 'none', 
              transition: 'transform 0.3s',
              backgroundColor: expanded ? 'action.selected' : 'transparent'
            }}
          >
            {expanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </Box>}
            }}
          >
            H2H
          </Button>
          <IconButton 
            onClick={handleExpandClick}
            size="small"
            sx={{ 
              transform: expanded ? 'rotate(180deg)' : 'none', 
              transition: 'transform 0.3s',
              backgroundColor: expanded ? 'action.selected' : 'transparent'
            }}
          >
            {expanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </Box>
      </CardContent>

      {/* Conteúdo expandido com eventos */}
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <Divider />
        <CardContent>
          <Typography variant="subtitle2" gutterBottom>
            Eventos da Partida
          </Typography>
          
          {events && events.length > 0 ? (
            <Stack spacing={1}>
              {events.map((event, index) => (
                <Paper 
                  key={`${event.time?.elapsed || 0}-${event.type}-${index}`} 
                  elevation={1} 
                  sx={{ 
                    p: 2, 
                    backgroundColor: 'background.paper',
                    border: '1px solid',
                    borderColor: 'divider',
                    borderLeft: '4px solid',
                    borderLeftColor: event.type === 'Goal' ? 'success.main' : 
                                   event.type === 'Card' ? (event.detail === 'Yellow Card' ? 'warning.main' : 'error.main') :
                                   event.type === 'subst' ? 'info.main' : 'grey.400'
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', flex: 1 }}>
                      <Box sx={{ mr: 2 }}>
                        {renderEventIcon(event.type, event.detail)}
                      </Box>
                      
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2" fontWeight="medium">
                          {formatEventText(event)}
                        </Typography>
                        
                        {event.comments && (
                          <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
                            {event.comments}
                          </Typography>
                        )}
                      </Box>
                    </Box>
                    
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Chip
      {/* Conteúdo expandido com H2H */}
      <Collapse in={h2hExpanded} timeout="auto" unmountOnExit>
        <Divider />
        <CardContent>
          <Typography variant="subtitle2" gutterBottom>
            Histórico de Confrontos
          </Typography>
          
          <H2HDisplay
            h2hData={h2hData || null}
            loading={h2hLoading}
            error={h2hError || null}
            currentMatch={match}
          />
        </CardContent>
      </Collapse>

      {/* Conteúdo expandido com Odds */}
      <Collapse in={oddsExpanded} timeout="auto" unmountOnExit>
        <Divider />
        <CardContent>
          <Typography variant="subtitle2" gutterBottom>
            Odds da Partida
          </Typography>
          
          <OddsDisplay
            oddsData={oddsData || null}
            loading={oddsLoading}
            error={oddsError || null}
            currentMatch={match}
          />
        </CardContent>
      </Collapse>
            </Stack>
          ) : (
            <Typography variant="body2" color="text.secondary" textAlign="center" sx={{ py: 2 }}>
              Nenhum evento registrado para esta partida.
              <br />
              <Typography variant="caption" color="text.secondary">
                Os eventos aparecerao aqui em tempo real conforme acontecem na partida.
              </Typography>
            </Typography>
          )}
        </CardContent>
      </Collapse>

      {/* Conteúdo expandido com H2H */}
      <Collapse in={h2hExpanded} timeout="auto" unmountOnExit>
        <Divider />
        <CardContent>
          <Typography variant="subtitle2" gutterBottom>
            Histórico de Confrontos
          </Typography>
          
          <H2HDisplay
            h2hData={h2hData || null}
            loading={h2hLoading}
            error={h2hError || null}
            currentMatch={match}
          />
        </CardContent>
      </Collapse>
    </Card>
  );
};

export default LiveMatchCard;
